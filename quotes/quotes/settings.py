"""
Django settings for quotes project.

Generated by 'django-admin startproject' using Django 4.2.5.

For more information on this file, see
https://docs.djangoproject.com/en/4.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.2/ref/settings/
"""

import os

from dotenv import load_dotenv
from pathlib import Path

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

load_dotenv()

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
secret_file = os.environ.get("DJANGO_SECRET_KEY_FILE")
if secret_file and not os.path.exists(secret_file):
    secret_file = os.path.join(os.getcwd(), secret_file)
if secret_file:
    with open(secret_file, 'r') as fd:
        SECRET_KEY = ''.join([line.strip() for line in fd.readlines()])
else:
    SECRET_KEY  = os.environ.get("DJANGO_SECRET_KEY")

# SECRET_KEY = os.environ.get("DJANGO_SECRET_KEY")

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = []


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    # 'bootstrap4',
    'apps.quotes',
    'apps.users',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'quotes.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'quotes.wsgi.application'


# Database
# https://docs.djangoproject.com/en/4.2/ref/settings/#databases

secret_file = os.environ.get("POSTGRES_PASSWORD_FILE")
if secret_file and not os.path.exists(secret_file):
    secret_file = os.path.join(os.getcwd(), secret_file)
if secret_file:
    with open(secret_file, 'r') as fd:
        POSTGRES_PASSWORD = ''.join([line.strip() for line in fd.readlines()])
else:
    POSTGRES_PASSWORD  = os.environ.get("POSTGRES_PASSWORD")


DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.postgresql_psycopg2',
        'NAME'      : os.environ.get("POSTGRES_NAME"),
        'USER'      : os.environ.get("POSTGRES_USER"),
        'PASSWORD'  : POSTGRES_PASSWORD,
        'HOST'      : os.environ.get("POSTGRES_HOST"),
        'PORT'      : os.environ.get("POSTGRES_PORT"),
    }
}

# DATABASES = {
#     'default': {
#         'ENGINE': 'django.db.backends.sqlite3',
#         'NAME': BASE_DIR / 'db.sqlite3',
#     }
# }


# Password validation
# https://docs.djangoproject.com/en/4.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/4.2/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = False


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.2/howto/static-files/

STATIC_URL = 'static/'

# Default primary key field type
# https://docs.djangoproject.com/en/4.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

LOGIN_REDIRECT_URL = '/'

LOGIN_URL = '/users/signin'

EMAIL_BACKEND       = "django.core.mail.backends.smtp.EmailBackend"
# TODO: use pydantic
EMAIL_HOST          = os.environ.get("MAIL_SERVER")
EMAIL_PORT          = os.environ.get("MAIL_PORT")
EMAIL_STARTTLS      = os.environ.get("MAIL_STARTTLS")   .upper() == "TRUE"
EMAIL_USE_SSL       = os.environ.get("MAIL_SSL_TLS")    .upper() == "TRUE"
EMAIL_USE_TLS       = not EMAIL_USE_SSL
EMAIL_HOST_USER     = os.environ.get("MAIL_USERNAME")
EMAIL_HOST_PASSWORD = os.environ.get("MAIL_PASSWORD")
DEFAULT_FROM_EMAIL  = os.environ.get("MAIL_FROM")
# SERVER_EMAIL        = os.environ.get("MAIL_FROM")
pass